#!/usr/bin/env ruby

# Handles all file system actions.
require 'pathname'
# Ruby multi-threading.
require 'thread'
# Nice way to print out objects. Used for debug.
require 'pp'

# OPERATOR OVERLOAD. I got tired of typing .read everywhere.
class Pathname
  def ===(t2)
    read == t2.read
  end
end

# Holds all information and extensions for a specific test.
class Test
  attr_accessor :correct_stdout, :correct_stderr, :correct_pixels

  def initialize(test_name)
    @name = test_name
    @passed_test = false
    @correct_stdout = @correct_stderr = @correct_pixels = false
    @result_files = %w(passed myout myerr mypixels)
    @test_files = %w(err out keypresses pixels jpg gpl pixels_option1 pixels_option2)
  end

  def passed_test?
    @passed_test ||= if correct_stdout && correct_stderr && correct_pixels
                       `touch results/#{@name}.passed`
                       true
                     end
  end

  def failed_test?
    !passed_test
  end

  def display
    print passed_test? ? 'Passed ' : 'Failed '
    print "#{@name} "
    print '<stdout incorrect> ' unless @correct_stdout
    print '<stderr incorrect> ' unless @correct_stderr
    print '<pixels incorrect>' unless @correct_pixels
    puts
  end

  # Returns a Pathname object for the given extension.
  # i.e. Test<"t001">.gpl returns Pathname<"tests/t001.gpl">
  # If extension ends with question mark
  # then return true or false if the file exists.
  def method_missing(ext)
    temp_ext = ext.to_s.dup
    ext = ext.to_s.delete('?')
    if @test_files.include? ext
      test = Pathname.new("tests/#{@name}.#{ext}")
    elsif @result_files.include? ext
      test = Pathname.new("results/#{@name}.#{ext}")
    else
      fail("Unknown extension given #{p ext}")
    end
    return test.exist? if temp_ext[temp_ext.length - 1] == '?'
    test
  end
end

# Convert numbers to t### format.
def format_test_number(tn)
  tn = tn.to_s
  tn.insert(0, '0') while tn.length < 3
  tn.insert(0, 't') unless tn =~ /t\d+{3}/
  abort("Test number <#{tn}> can't be formatted.") unless tn =~ /t\d+{3}/
  Test.new(tn)
end

# Convert #-# test range to array of tests matching t### format.
def format_test_range(range)
  abort('Invalid test range.') unless /\d+-\d+/ =~ range
  # Parse left side of dash
  begin_range = range.match(/\d+/).to_s.to_i
  # Parse right side of dash
  end_range = range.match(/\d+$/).to_s.to_i
  (begin_range..end_range).to_a.map { |t| format_test_number(t) }
end

test_dir = Pathname.new('tests')
results_dir = Pathname.new('results')

# Does the gpl executable exist in current directory?
unless File.file? 'gpl'
  abort 'There is no gpl executable in this directory. gt is giving up.'
end

# Is the tests a directory and exist?
unless test_dir.directory?
  abort 'There is not a test subdirectory in this directory. gt is giving up.'
end

# Create results directory if it doesn't exist already.
results_dir.mkdir unless results_dir.directory?

# Determine what argument was given and format input.
queued_tests = if ARGV.last =~ /^(t)?\d+$/ # Single test number given
                 [format_test_number(ARGV.last.dup)]
               # Range of test numbers given
               elsif ARGV.last =~ /(t)?\d+-(t)?\d+/
                 format_test_range ARGV.last.dup
               # Run all tests
               else
                 # Get 3 digit number of last test in tests directory.
                 end_range = test_dir.entries
                                     .last
                                     .basename
                                     .to_s
                                     .sub('t', '')
                                     .gsub(/\..*/, '')
                 format_test_range "1-#{end_range}"
               end

# Remove tests that don't exist.
queued_tests.keep_if { |t| t.gpl.exist? }

# Make sure tests were found for given test number(s).
abort "<#{ARGV.last}> does not exist. Giving up." if queued_tests.empty?

# If running grader as default then remove passed tests.
previously_passed_tests = queued_tests.size
queued_tests.delete_if(&:passed?) if ARGV.last.nil?
previously_passed_tests -= queued_tests.size

# Delete .passed files for tests unless gtr is running as default.
queued_tests.each { |t| t.passed.unlink if t.passed? } unless ARGV.last.nil?

# Handle all the testing.
# t - Test object
def run_test(t)

  # Keep track of CLI flags.
  gpl_flags = []
  # Set default seed.
  gpl_flags << '-s 42'

  if t.jpg?
    t.jpg.write 'no pixel file created'
    gpl_flags << "-dump_pixels #{t.mypixels.to_s}"
  end

  if t.keypresses?
    gpl_flags << '-stdin'
    `./gpl #{gpl_flags.join(' ')} #{t.gpl} < #{t.keypresses} > #{t.myout.to_s} 2> #{t.myerr.to_s}`
  else
    `./gpl #{gpl_flags.join(' ')} #{t.gpl} > #{t.myout.to_s} 2> #{t.myerr.to_s}`
  end

  # Compare file contents.
  t.correct_stdout = t.myout === t.out
  t.correct_stderr = t.myerr === t.err

  if t.jpg?
    t.correct_pixels = if t.mypixels === t.pixels
                         true
                       elsif t.pixels_option1? && t.mypixels === t.pixels_option1
                         true
                       elsif t.pixels_option2? && t.mypixels === t.pixels_option2
                         true
                       else
                         false
                       end
  else
    # No .jpg test exists so default to correct.
    t.correct_pixels = true
  end
end

threads = []
# Allocate Tests to threads.
queued_tests.each { |t| threads << Thread.new { run_test(t) } }
# Wait for all threads to finish.
threads.each(&:join)

# Print out results for each test.
queued_tests.each(&:display)

total = queued_tests.size
total_passed = queued_tests.keep_if(&:passed_test?).size
total_failed = total - total_passed

puts "Passed #{total_passed} out of #{total} tests."
puts "Failed #{total_failed} out of #{total} tests."

if previously_passed_tests > 0
  puts "\t#{previously_passed_tests} tests were skipped (passed on previous run)"
  puts "\t'$ gt -all' to run all tests (recommended before you turn in assignment)"
  puts "\t'$ gt 42' to run test t042.gpl"
end
